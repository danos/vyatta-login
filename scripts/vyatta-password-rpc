#! /usr/bin/python3
#
# Copyright (c) 2021, AT&T Intellectual Property. All rights reserved.
#
# SPDX-License-Identifier: GPL-2.0-only
#

import os
import sys
import json
import crypt
from vyatta import configd

class ChangePassword:
    def __init__(self, cfg_client, pwuser, password):
        self.sessid = str(os.getpid())
        self.client = cfg_client
        self.user = pwuser
        self.path = ["system", "login", "user", pwuser, "authentication",
                     "plaintext-password", password]

    def setup_session(self):
        self.client.session_setup(self.sessid)
        try:
            self.client.session_exists()
        except Exception as exc:
            print(exc)
            sys.exit(1)

    def teardown_session(self):
        self.client.session_teardown()

    def set_password(self, path):
        try:
            self.client.set(path)
        except Exception as exc:
            print(exc)
            sys.exit(1)

    def commit_password(self):
        try:
            msg = "vyatta-system-login-v1:change-password request for user {}".format(self.user)
            self.client.commit(msg)
        except Exception as exc:
            print(exc)
            sys.exit(1)

    def change_password(self):
        self.setup_session()
        self.set_password(self.path)
        self.commit_password()
        self.teardown_session()

def is_current_password(pwuser, cur_pw):
    path = "system login user {} authentication encrypted-password".format(pwuser)
    try:
        cur_epw = client.tree_get_dict(path, configd.Client.RUNNING)['encrypted-password']
    except Exception as exc:
        print(exc)
        return 0
    epw = crypt.crypt(cur_pw, cur_epw)
    if epw == cur_epw:
        return 1
    print("Authentication failure")
    return 0

if __name__ == "__main__":
    try:
        metadata = json.loads(os.getenv('VCI_RPC_METADATA'))
    except ValueError as exc:
        print("Environment variable parse error: {}".format(exc), sys.stderr)
        sys.exit(1)
    user = metadata['User']

    try:
        rpc_input = json.load(sys.stdin)
    except ValueError as exc:
        print("Input parse error: {}".format(exc), sys.stderr)
        sys.exit(1)
    current_pw = rpc_input.get("current-password")

    try:
        client = configd.Client()
    except Exception as exc:
        print(exc)
        sys.exit(1)

    if sys.argv[1] == "verify-password":
        if not is_current_password(user, current_pw):
            sys.exit(1)
    elif sys.argv[1] == "change-password":
        if not is_current_password(user, current_pw):
            sys.exit(1)
        pw = ChangePassword(client, user, rpc_input.get("new-password"))
        pw.change_password()
    else:
        print("Invalid command")
        sys.exit(1)
    sys.exit(0)
